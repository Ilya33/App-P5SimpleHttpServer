#!/usr/bin/env perl
# App::P5SimpleHttpServer - Copyright (C) 2019- Ilya Pavlov
# This library is free software; you can redistribute it and/or modify
# it under the same terms as Perl itself.

use strict;
use warnings;

use FindBin;
use File::Spec;
use Getopt::Long;

use Plack::Runner;
use Plack::Builder;
use Plack::App::Directory;

use lib "$FindBin::RealBin/../lib/";
use App::P5SimpleHttpServer;
use Plack::Middleware::App::P5SimpleHttpServer::Index;
use Plack::Middleware::App::P5SimpleHttpServer::Proxy;


use constant {
    PORTS_RANGE => [0, 65535]
};



sub _uniq {
     my %h = map {$_ => 1} @_;
     return keys(%h);
}



my @pr_args;
my @index;
my $proxies = [];

{
    my $help;
    my $version;
    my $index;
    my @locations;
    my @proxy_pass;
    my @tf_locations;
    my @tf_proxy_pass;
    my %tfpp;
    my ($port, $host, $socket, @listen, $access_log);

    Getopt::Long::Configure ('no_auto_abbrev');
    GetOptions(
        'h|help'            => \$help,
        'v|version'         => \$version,
        'o|host=s'          => \$host,
        'p|port=i'          => \$port,
        'S|socket=s'        => \$socket,
        'l|listen=s@'       => \@listen,
        'access-log=s'      => \$access_log,
        #'D|daemonize'      => \$run_in_background,

        'index=s'           => \$index,
        'location=s@'       => \@locations,
        'proxy-pass=s@'     => \@proxy_pass,
        'tf-location=s@'    => \@tf_locations,
        'tf-proxy-pass=s@'  => \@tf_proxy_pass
    )
    or do { $help = 1 };

    if (defined($help)) {
        require Pod::Usage;
        Pod::Usage->import('pod2usage');

        pod2usage({
            -verbose => 99,
            -sections => ["SYNOPSIS", "OPTIONS", "EXAMPLES"],
            -exitval => 0
        });
    }

    if (defined($version)) {
        print "p5-simple-http-server version is ",
            $App::P5SimpleHttpServer::VERSION, "\n(",
            App::P5SimpleHttpServer::get_repo_url(), ")\n";
        exit(0);
    }

    if (defined($port) && ($port !~ /^\d+$/ || $port < PORTS_RANGE->[0] || $port > PORTS_RANGE->[1])) {
        die("Port MUST be an integer >=".PORTS_RANGE->[0]." and <=".PORTS_RANGE->[1]."\n");
    }

    if (defined($index)) {
        $index =~ s/ +/ /;
        @index = split(/ /, $index);

        for(@index) {
            if ($_ =~ m!/\x00!) {
                die("Filename can't contains '/' or '\x00' in index flag\n");
            }
            elsif($_ =~ m!^\.\.?$!) {
                die("Filename can't be '.' or '..' in index flag\n");
            }
        }

        my @_a = _uniq(@index);
        if (scalar(@_a) != scalar(@index)) {
            @index = @_a;
            warn("WARNING: There are duplicate params in index flag.\n");
        }
    }


    my $i;
    my $l = scalar(@locations);
    if (scalar(@proxy_pass) != $l) {
        die("The count of locations MUST be equal to proxy_pass options.\n");
    }

    for ($i=0; $i<$l; ++$i) {
        push @$proxies, {
            location    => $locations[$i],
            remote      => $proxy_pass[$i],
            'try-files' => 0
        };
    }

    $l = scalar(@tf_locations);
    if (scalar(@tf_proxy_pass) != $l) {
        die("The count of tf-locations MUST be equal to tf-proxy_pass options.\n");
    }

    for ($i=0; $i<$l; ++$i) {
        push @$proxies, {
            location    => $tf_locations[$i],
            remote      => $tf_proxy_pass[$i],
            'try-files' => 1
        };
    }


    if (defined($ARGV[0]) && !(-d $ARGV[0])) {
        die("Can't find '".$ARGV[0]."' directory\n");
    }

    if (defined($port)) {
        push(@pr_args, "-p=$port");
    }
    if (defined($host)) {
        push(@pr_args, "-o=$host");
    }
    if (defined($socket)) {
        push(@pr_args, "-S=$socket");
    }
    for (@listen) {
        push(@pr_args, "-l=$_");
    }
    if (defined($access_log)) {
        push(@pr_args, "-access-log=$access_log");
    }
}

my $server_directory = File::Spec->rel2abs($ARGV[0]);


my $runner = Plack::Runner->new();
$runner->parse_options(@pr_args);

my $app = Plack::App::Directory->new({root => $server_directory})->to_app();

my $builder = Plack::Builder->new();

if (@index) {
    $builder->add_middleware(
        "App::P5SimpleHttpServer::Index",
        root => $server_directory,
        index => \@index
    );
}

if (@$proxies) {
    $builder->add_middleware(
        "App::P5SimpleHttpServer::Proxy",
        root => $server_directory,
        proxies => $proxies
    );
}

$app = $builder->wrap($app);

$runner->run($app);



__END__

=encoding utf-8

=head1 NAME

p5-simple-http-server - simple HTTP server for local testing. Do not use it in
production.

=head1 INSTALL

    curl -L https://cpanmin.us | perl - --sudo https://github.com/Ilya33/App-P5SimpleHttpServer.git

or download binary file from L<https://github.com/Ilya33/App-P5SimpleHttpServer/releases>

=head1 SYNOPSIS

    p5-simple-http-server [OPTIONS] [DIRECTORY]

=head1 OPTIONS

=over 4

=item B<-h, --help>

Shows this help

=item B<-v, --version>

Shows p5-simple-http-server version

=item B<-o, --host>

Binds to a TCP interface. Defaults to undef, which lets most server backends
bind to the any (*) interface. This option is only valid for servers which
support TCP sockets.

=item B<-p, --port>

Binds to a TCP port. Defaults to 5000. This option is only valid for servers
which support TCP sockets.

=item B<-S, --socket>

Listens on a UNIX domain socket path. Defaults to undef. This option is only
valid for servers which support UNIX sockets.

=item B<-l, --listen>

Listens on one or more addresses, whether "HOST:PORT", ":PORT", or "PATH"
(without colons). You may use this option multiple times to listen on multiple
addresses, but the server will decide whether it supports multiple interfaces.

=item B<--access-log>

Specifies the pathname of a file where the access log should be written. By
default, in the development environment access logs will go to STDERR.

=item B<--index>

Like nginx's index directive

=item B<--location>

...

=item B<--proxy-pass>

...

=item B<--tf-location>

...

=item B<--tf-proxy-pass>

...

=back

=head1 EXAMPLES

    # serve current directory on port 5000 and IP 0.0.0.0
    p5-simple-http-server
    
    # serve current directory on port 5678 and IP 0.0.0.0
    p5-simple-http-server -p=5678
    
    # serve current directory on port 5000 and IP 127.0.0.1
    p5-simple-http-server --host=127.0.0.1
    
    # serve /path/to/directory directory
    p5-simple-http-server /path/to/directory
    
    # serve current directory and "index.html" or "index.htm" be used as an index
    p5-simple-http-server --index="index.html index.htm"

If you want to serve Linux repository from iso just mount or unpack iso to
SOME_DIRECTORY and run:

    p5-simple-http-server -p=5678 SOME_DIRECTORY

=head1 BUGS

Please report any bugs through the web interface at
L<https://github.com/Ilya33/App-P5SimpleHttpServer>. Patches are always welcome.

=head1 AUTHOR

Ilya Pavlov E<lt>ilux@cpan.orgE<gt>

Contributors:

Fovik

=head1 COPYRIGHT

Copyright 2019- Ilya Pavlov

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut